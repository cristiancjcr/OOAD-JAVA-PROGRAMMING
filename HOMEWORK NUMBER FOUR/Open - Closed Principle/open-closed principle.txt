✅ Ce este `OCP` – pe scurt
O clasă sau modul trebuie să fie :

- Deschis pentru extindere (adică poți adăuga comportament nou)
- Închis pentru modificare (nu trebuie să modifici codul existent)



🎯 Unde și pentru ce îl folosim
🧱 Folosim `OCP` în situații unde comportamentul se poate schimba sau extinde în viitor, de exemplu :

- Sisteme cu reguli de business variabile (reduceri, taxe, comisioane)
- Calculatoare de preț, de scoruri, de bonusuri
- Sisteme de plată cu mai multe metode (card, PayPal, crypto etc.)
- Parsere pentru diferite tipuri de fișiere (JSON, XML, CSV)
- În framework-uri (Spring, Hibernate) unde extensibilitatea e critică

➡️ Scopul e să evităm efectul de “cascadă” : când adaugi o funcție nouă și trebuie să modifici zeci de locuri.



⚔️ De ce e mai bun decât "if-uri peste if-uri"

Fără `OCP` :
- Ai un if/else mare în mijlocul codului
- Codul devine greu de citit și testat
- Adăugarea unui nou comportament implică modificări directe în logica existentă (risc de bug-uri)

Cu `OCP` :
- Folosești interfețe + polimorfism pentru a injecta comportamente
- Când adaugi ceva nou, creezi o clasă nouă, nu modifici clasele existente
- Codul e mai sigur, mai clar și testabil modular



⚡ Avantaje practice

✅ Ușor de extins fără riscuri
✅ Cod clar, fără switch/if greu de urmărit
✅ Evităm "god classes" – clase uriașe care fac de toate
✅ Ideal în echipe mari, unde fiecare dezvoltator poate lucra pe o clasă fără să afecteze altele



🧠 Exemple din viața reală

Adaugi un nou tip de reducere în magazin → creezi o nouă clasă
Vrei un nou export în format Excel → creezi o nouă implementare
Adaugi un nou filtru pe o listă → doar implementezi o interfață
